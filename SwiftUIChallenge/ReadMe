Con base en nuestra experiencia, hemos dise√±ado un reto t√©cnico que creemos te permitir√° demostrar tus habilidades en la creaci√≥n de aplicaciones con arquitectura MVVM y el manejo de repositorios.
La tarea que te proponemos consiste en crear una aplicaci√≥n utilizando SwiftUI que tenga al menos dos pantallas. La primera de ellas deber√° ser una lista que muestre los detalles esenciales de un objeto determinado, como por ejemplo su t√≠tulo, una imagen miniatura, subt√≠tulo, duraci√≥n, etc. En cuanto a la segunda, se trata de una vista detallada que deber√° contener toda la informaci√≥n restante del objeto y un reproductor de video o audio.
Este proyecto tambi√©n debe tener en cuenta la posibilidad de que el usuario quede sin conexi√≥n a Internet. Por tanto, necesitamos que implementes un modo offline, utilizando alg√∫n tipo de persistencia de datos con tecnolog√≠as como Core Data o Realm (nuestra preferencia), SQLite, entre otros. Eso s√≠, te pedimos expl√≠citamente que evites el uso de User Defaults.
En cuanto al consumo de las APIs, te pedimos que lo hagas mediante async await, siguiendo las mejores pr√°cticas actuales de desarrollo.
Una vez hayas completado la prueba, por favor entrega el proyecto en un repositorio remoto Git de tu elecci√≥n (Github, Gitlab, Bitbucket, etc). Ser√≠a ideal que este repositorio refleje la evoluci√≥n de tu trabajo a trav√©s de commits que describan cada paso en el proceso de desarrollo.
Por favor no uses archivos zip. para enviar tu prueba.
Tienes libertad para escoger cualquier API p√∫blica de esta lista. O usar pexels para obtener videos
Adem√°s, te ofrecemos la oportunidad de ganar puntos extra si tu prueba incluye el uso de Combine, Unit Tests y/o UI tests, o si implementas una funcionalidad que permita detectar cambios en la conectividad de red. ¬°Mucho √©xito!
Technical Exercise iOS 1
üçè

- en la creaci√≥n de aplicaciones con arquitectura MVVM

- crear una aplicaci√≥n utilizando SwiftUI que tenga al menos dos pantallas. La primera de ellas deber√° ser una lista que muestre los detalles esenciales de un objeto determinado, como por ejemplo su t√≠tulo, una imagen miniatura, subt√≠tulo, duraci√≥n, etc. En cuanto a la segunda, se trata de una vista detallada que deber√° contener toda la informaci√≥n restante del objeto y un reproductor de video o audio.

- debe tener en cuenta la posibilidad de que el usuario quede sin conexi√≥n a Internet. Por tanto, necesitamos que implementes un modo offline, utilizando alg√∫n tipo de persistencia de datos con tecnolog√≠as como Core Data o Realm (nuestra preferencia), SQLite, entre otros. Eso s√≠, te pedimos expl√≠citamente que evites el uso de User Defaults.
En cuanto al consumo de las APIs, te pedimos que lo hagas mediante async await, siguiendo las mejores pr√°cticas actuales de desarrollo.

- puntos extra si tu prueba incluye el uso de Combine, Unit Tests y/o UI tests, o si implementas una funcionalidad que permita
